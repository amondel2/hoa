buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "http://dl.bintray.com/stefanogualdi/plugins" }
        maven { url "https://plugins.gradle.org/m2/"}

    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.15.1"
        classpath "gradle.plugin.com.energizedwork.webdriver-binaries:webdriver-binaries-gradle-plugin:1.4"

    }
}

version "1.29"
group "hoa"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"com.energizedwork.webdriver-binaries"
apply plugin:"asset-pipeline"
apply plugin:"org.grails.grails-gsp"
apply plugin: "java"
//apply plugin: "fi.evident.beanstalk"

repositories {
    mavenLocal()
    jcenter()
    maven { url "https://repo.grails.org/grails/core" }
    maven { url 'http://dl.bintray.com/agorapulse/libs' }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.1.16.Final"
    compile "org.grails.plugins:gsp"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    runtime "com.h2database:h2"
    runtime "org.apache.tomcat:tomcat-jdbc"
    testCompile 'com.aoe:geb-spock-reports:0.1.5'
    // required spock libraries
//    testCompile "org.spockframework:spock-core:1.1-groovy-2.4-rc-2"

    testCompile ("com.athaydes:spock-reports:1.5.0") { transitive = false }

    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.14.8"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.springframework.security:spring-security-test:4.2.3.RELEASE"
    testCompile "org.grails:grails-web-testing-support"
    testCompile("org.grails.plugins:geb") {
        exclude group: 'org.gebish', module: 'geb-spock'
    }
    testCompile "org.gebish:geb-spock:$gebVersion"

    testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testRuntime "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-remote-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"
    compile 'org.grails.plugins:spring-security-core:3.2.3'
    compile 'org.grails.plugins:spring-security-ui:3.1.2'
    runtime 'mysql:mysql-connector-java:8.0.15'
    compile 'org.grails.plugins:grails-melody-plugin:1.74.0'
    compile "org.grails.plugins:ckeditor:4.5.9.0"
}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    addResources = true
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

webdriverBinaries {
    chromedriver chromeDriverVersion
    geckodriver geckoDriverVersion
}

compileJava {
//raise heap
    options.fork = true
    options.forkOptions.with {
        memoryMaximumSize = '4g'
    }
}

tasks.withType(Test) {
    systemProperty "geb.env", ((System.getProperty('geb.env') ?: System.getenv('geb.env') ) ?: (System.getProperty('gebenv') ?: System.getenv('gebenv') )) ?: 'firefox'
    systemProperty "geb.build.reportsDir", "build/geb-reports" //reporting.file("geb/integrationTest")


//    reportsDir "target/geb-reports"


    beforeTest { descriptor -> logger.quiet " -- $descriptor" }
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat 'full'
    }
}

//tasks.withType(Test) {
//    systemProperty "geb.env", System.getProperty('geb.env')
//    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
//    systemProperty "webdriver.chrome.driver", "/home/aaron/chromedriver" // System.getProperty('webdriver.chrome.driver')
////    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
//}

tasks.withType(GroovyCompile) {
    configure(groovyOptions.forkOptions) {
        memoryMaximumSize = '4g'
        jvmArgs = ['-XX:MaxPermSize=2g', '-Xms2g', '-Xmx4g']
    }
}

assets {
    minifyJs = true
    minifyCss = true
}